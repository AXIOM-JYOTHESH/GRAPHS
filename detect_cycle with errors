
class detect_cycle
{
    private:
    bool cycle(int v , vector<int> adj[],int vis[]){
        stack<pair<int,int>> q;
        vis[v] = 1;
        
        q.push({v,-1});
        
        while(!q.empty()){
            
            pair<int,int> j;
            
           /* j = q.top()
            int node;
            int parent;
            node = j.first;
            parent  = j.second;*/
            int node = q.top().first;
            int parent = q.top().second;
            q.pop();
            for(auto it : adj[node]){
                
                if(!vis[it]){
                    vis[it]=1;
                    q.push({it,node});
                    
                }
                else{
                    if(it!=parent){
                        return true;
                    }
                }
            
            
        }
        }
        
        return false;
        
        
        
    }
    
    public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        int vis[V] = {0};
        
        for (int i=0;i<V;i++){
            bool w;
            
                if(!vis[i]){
                   
                   if( cycle(i,adj,vis)){
                       return true;
                   }
                    
                }
                
        
        }
        return false;
            
        
       
        
        
    }
    
    
    
};
